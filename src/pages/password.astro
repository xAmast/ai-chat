---
import { ArrowRightIcon } from '@heroicons/react/24/outline';

import Logo from '@/components/icons/LogoIcon';
import Layout from '@/theme/Layout.astro';
import Footer from '@/theme/components/Footer.astro';
---

<Layout title="访问受限">
  <main
    class="h-screen flex flex-col align-center justify-center mx-auto p-[6rem_2rem_4rem]"
  >
    <div class="text-center -mt-20">
      <div class="flex items-center justify-center">
        <Logo className="w-20 h-20" />
      </div>

      <div class="mt-6 flex align-center justify-center">
        <span class="gpt-title">2023 我们一起与 AI 对话</span>
        <!-- <span class="gpt-subtitle">对话</span> -->
      </div>
      <p class="mt-2 opacity-60">Based on OpenAI API</p>
    </div>
    <div id="input_container" class="mt-20 flex justify-center">
      <input
        id="password_input"
        type="password"
        class="gpt-password-input"
        placeholder="Please input password"
      />
      <div
        id="submit"
        class="gpt-password-submit bg-opacity-20 hover:bg-opacity-50"
      >
        <ArrowRightIcon className="w-4 h-4" />
      </div>
    </div>
    <Footer />
  </main>
</Layout>

<script>
  const inputContainer = document.getElementById(
    'input_container'
  ) as HTMLDivElement;
  const input = document.getElementById('password_input') as HTMLInputElement;
  const submitButton = document.getElementById('submit') as HTMLDivElement;

  input.onkeydown = async (event) => {
    if (event.key === 'Enter') handleSubmit();
  };
  submitButton.onclick = handleSubmit;

  async function handleSubmit() {
    const password = input.value;
    const response = await fetch('/v1/auth', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        pass: password,
      }),
    });
    const responseJson = await response.json();
    if (responseJson.code === 0) {
      localStorage.setItem('pass', password);
      window.location.href = '/';
    } else {
      inputContainer.classList.add('invalid');
      setTimeout(() => {
        inputContainer.classList.remove('invalid');
      }, 300);
    }
  }
</script>

<style>
  @keyframes shake {
    0% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(0.5rem);
    }
    75% {
      transform: translateX(-0.5rem);
    }
    100% {
      transform: translateX(0);
    }
  }

  .invalid {
    animation: shake 0.2s ease-in-out 0s 2;
  }
</style>

<style is:global>
  :root {
    --content-width: 72ch;
    --content-padding-top: 4rem;
    --header-height: calc(112px + 1rem);
    --footer-height: calc(74px + 4rem);
    --content-background: #f6f6f6;
    --accent: 124, 58, 237;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      #da62c4 30%,
      white 60%
    );
  }
  html {
    font-family: system-ui, sans-serif;
    background-color: var(--content-background);
  }
  code {
    font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
      DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
  }
  textarea::-webkit-scrollbar {
    display: none;
  }
  header,
  footer {
    position: fixed;
    left: calc(50%);
    transform: translateX(-50%);
    padding: 2rem;
    max-width: var(--content-width);
    width: 100%;
    z-index: 999;
    background: var(--content-background);
  }
  header {
    top: var(--content-padding-top);
    padding-top: 0;
    padding-bottom: 0;
  }
  footer {
    bottom: 0;
  }

  .gpt-title,
  header .title {
    margin-right: 0.25rem;
    font-size: 1.8rem;
    line-height: 2rem;
    font-weight: 800;
  }

  .gpt-subtitle {
    background-image: linear-gradient(
      to right,
      rgba(56, 189, 248, 1),
      rgba(5, 150, 105, 1)
    );
    -webkit-background-clip: text;
    background-clip: text;
    font-size: 1.8rem;
    line-height: 2rem;
    font-weight: 800;
    color: transparent;
  }

  .gpt-password-input {
    outline: none;
    height: 3rem;
    border-radius: 0.125rem;
    background-color: rgba(148, 163, 184, 0.15);
    padding: 0.75rem 1rem;
  }

  .gpt-password-submit {
    height: 3rem;
    width: 3rem;
    display: flex;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    background-color: rgba(148, 163, 184, var(--tw-bg-opacity));
  }

  /* .gpt-password-submit {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  } */

  .bg-gradient {
    background-image: var(--accent-gradient);
    background-size: 400%;
    background-position: 0%;
  }
  pre code.hljs {
    border-radius: 4px;
  }
  code.hljs:not(pre code.hljs) {
    /* remove inline code background */
    background: transparent;
  }
  .katex-display: {
    overflow-x: scroll;
    overflow-y: hidden;
  }
  ol,
  ul,
  menu {
    list-style: auto;
    padding: 10px;
    margin-left: 20px;
  }
  ul {
    list-style: initial;
  }
  /* 定义动画效果 */
  @keyframes fadeIn {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* 给要添加动画的元素应用动画 */
  .msg-fade-in {
    animation-name: fadeIn;
    animation-duration: 1s;
    animation-fill-mode: both;
  }

  .loading {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .loading:before {
    content: '';
    width: 16px;
    height: 16px;
    border-radius: 10px;
    border-bottom: 2px solid #c6c1c1;
    animation: spin 0.75s linear infinite;
    margin-right: 10px;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  /* antd css rewrite */
  #container .ant-tabs-tab-active {
    background-color: var(--content-background);
    border-bottom-color: var(--content-background);
  }
  .ant-tabs > .ant-tabs-nav {
    margin-bottom: 0;
  }
  #container .ant-tabs-tab > .ant-tabs-tab-btn {
    max-width: 160px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .ant-tabs-dropdown {
    max-width: 400px;
  }
  .ant-tabs-dropdown .ant-tabs-dropdown-menu-item > span {
    overflow: hidden;
    text-overflow: ellipsis;
  }
  /* mobile style */
  @media screen and (max-width: 768px) {
    :root {
      --header-height: calc(82px + 1rem);
      --footer-height: calc(70px + 3rem);
      --content-padding-top: 2rem;
    }
    html {
      font-size: 14px;
    }
    footer {
      padding-bottom: 1rem;
    }
    header .title {
      font-size: 2rem;
    }
  }
</style>
